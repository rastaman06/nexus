<?xml version="1.0"?>
<!-- defines a standard build script used by all of the nexus subprojects -->
<project name="build-support" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <property name="src.dir"      value="src/main/java"/>
  <property name="ssrc.dir"     value="src/main/scala"/>
  <property name="tsrc.dir"     value="src/test/java"/>
  <property name="stsrc.dir"    value="src/test/scala"/>
  <property name="target.dir"   value="target"/>
  <property name="classes.dir"  value="${target.dir}/classes"/>
  <property name="tclasses.dir" value="${target.dir}/test-classes"/>

  <property name="maven-ant.vers" value="2.1.3"/>
  <property name="maven-ant.dir" value="${user.home}/.m2/ant-support"/>
  <property name="maven-ant.jar" value="${maven-ant.dir}/maven-ant-tasks-${maven-ant.vers}.jar"/>
  <property name="maven-ant.url"
            value="http://mirrors.ibiblio.org/pub/mirrors/apache/maven/binaries"/>
  <condition property="maven-ant.exists"><available file="${maven-ant.jar}"/></condition>
  <target name="-download-maven-ant" unless="maven-ant.exists">
    <mkdir dir="${maven-ant.dir}"/>
    <get src="${maven-ant.url}/maven-ant-tasks-${maven-ant.vers}.jar"
         dest="${maven-ant.jar}" usetimestamp="true"/>
  </target>

  <target name="-init-maven-ant" depends="-download-maven-ant">
    <taskdef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="urn:maven-artifact-ant" classpath="${maven-ant.jar}"/>
    <artifact:pom id="pom" file="pom.xml"/>
    <artifact:dependencies pathId="classpath" pomRefId="pom"/>
    <path id="test.classpath">
      <path refid="classpath"/>
      <pathelement location="${classes.dir}"/>
      <pathelement location="${tclasses.dir}"/>
    </path>
  </target>

  <target name="-prepare" depends="-init-maven-ant">
    <mkdir dir="${target.dir}"/>

    <!-- check whether we have java main source -->
    <condition property="have.java">
      <resourceexists><file file="${src.dir}"/></resourceexists>
    </condition>

    <!-- check whether we have scala main source -->
    <condition property="have.scala">
      <resourceexists><file file="${ssrc.dir}"/></resourceexists>
    </condition>

    <!-- check whether we have test source -->
    <condition property="have.javatests">
      <resourceexists><file file="${tsrc.dir}"/></resourceexists>
    </condition>

    <!-- check whether we have scala test source -->
    <condition property="have.scalatests">
      <resourceexists><file file="${stsrc.dir}"/></resourceexists>
    </condition>
  </target>

  <target name="clean" description="Cleans out build results.">
    <delete dir="${target.dir}"/>
  </target>

  <target name="-prep-gwt" if="build.copy-gwt-sources">
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </copy>
    <copy todir="${tclasses.dir}">
      <fileset dir="${tsrc.dir}" includes="**/*.java"/>
    </copy>
  </target>

  <target name="-prep-scala">
    <artifact:dependencies pathId="scalac.classpath">
      <dependency groupId="org.scala-lang" artifactId="scala-compiler" version="2.9.0"/>
      <dependency groupId="org.scala-lang" artifactId="scala-library" version="2.9.0"/>
    </artifact:dependencies>
    <taskdef resource="scala/tools/ant/antlib.xml" classpathref="scalac.classpath"/>
  </target>

  <target name="-prep-compile">
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}" failonerror="false">
      <fileset dir="src/main/resources" includes="**"/>
    </copy>
  </target>

  <target name="-compile-java" depends="-prep-compile" if="have.java">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" source="1.6" target="1.6" encoding="utf-8">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <compilerarg value="-Xlint:rawtypes"/>
    </javac>
  </target>

  <target name="-compile-scala" depends="-prep-compile,-prep-scala" if="have.scala">
    <scalac srcdir="${ssrc.dir}" destdir="${classes.dir}" classpathref="classpath"/>
  </target>

  <target name="compile" depends="-prepare,-prep-gwt,-compile-java,-compile-scala"
          description="Compiles the code."/>

  <target name="-prep-test">
    <mkdir dir="${tclasses.dir}"/>
    <copy todir="${classes.dir}" failonerror="false">
      <fileset dir="src/test/resources" includes="**"/>
    </copy>
  </target>

  <target name="-compile-java-tests" depends="-prep-test" if="hava.javatests">
    <javac srcdir="${tsrc.dir}" destdir="${tclasses.dir}" includeAntRuntime="false"
           debug="on" deprecation="on" source="1.6" target="1.6" encoding="utf-8">
      <classpath refid="test.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="-compile-scala-tests" depends="-prep-test,-prep-scala" if="have.scalatests">
    <scalac srcdir="${stsrc.dir}" destdir="${tclasses.dir}" classpathref="test.classpath"/>
  </target>

  <target name="compile-tests" depends="compile,-compile-java-tests,-compile-scala-tests"
          description="Compiles test code."/>

  <target name="test" depends="compile-tests" description="Runs the unit tests.">
    <!-- allows passing -Dtest=NamePrefix to restrict to subset of tests -->
    <property name="test" value=""/>
    <!-- allows passing -Dgwt.log=TRACE to obtain GWT debug logging -->
    <property name="gwt.log" value="WARN"/>
    <!-- allows passing -Dgwt.mode=-prod to obtain GWT debug logging -->
    <property name="gwt.mode" value=""/>

    <mkdir dir="${target.dir}/test-reports"/>
    <property name="war.dir" value="${target.dir}/test-war"/>
    <!-- we have to fork, otherwise the classloader will not work for GWT -->
    <junit printsummary="off" haltonfailure="yes" fork="yes">
      <classpath refid="test.classpath"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="gwt.args" value="${gwt.mode} -logLevel ${gwt.log} -war ${war.dir}"/>
      <sysproperty key="com.samskivert.depot.debug" value="${debug}"/>
      <formatter type="brief" usefile="false"/>
      <formatter type="xml"/>
      <batchtest todir="${target.dir}/test-reports">
        <fileset dir="${tclasses.dir}" includes="**/${test}*Test.class"/>
      </batchtest>
    </junit>
  </target>

  <property name="gencode.excludes" value="notused"/>
  <target name="gencode" depends="-prepare" description="Generates marshalling code.">
    <artifact:dependencies pathId="tools.classpath">
      <dependency groupId="com.threerings" artifactId="nexus-tools" version="1.0-SNAPSHOT"/>
    </artifact:dependencies>
    <javac srcdir="${src.dir}" includeAntRuntime="false"
           source="1.6" target="1.6" encoding="utf-8">
      <classpath>
        <path refid="classpath"/>
        <path refid="tools.classpath"/>
      </classpath>
      <compilerarg value="-s"/>
      <compilerarg value="${src.dir}"/>
      <compilerarg value="-processor"/>
      <compilerarg value="com.threerings.nexus.gencode.Processor"/>
      <compilerarg value="-proc:only"/>
      <compilerarg value="-Acom.threerings.nexus.gencode.header=lib/SOURCE_HEADER"/>
      <exclude name="**/Streamer_*.java"/>
      <exclude name="**/Factory_*.java"/>
      <exclude name="${gencode.excludes}"/>
    </javac>
  </target>

  <target name="package" depends="compile" description="Compiles code and builds jar file.">
    <jar destfile="${target.dir}/${ant.project.name}.jar" basedir="${classes.dir}"/>
  </target>

  <property name="maven.install.repo" value="file://${user.home}/.m2/repository"/>
  <target name="install" depends="package,test"
          description="Deploys our build artifacts to a Maven repository.">
    <jar destfile="${target.dir}/${ant.project.name}-sources.jar">
      <fileset dir="${src.dir}" includes="**/*.java" erroronmissingdir="false"/>
      <fileset dir="${ssrc.dir}" includes="**/*.scala" erroronmissingdir="false"/>
    </jar>
    <artifact:deploy file="${target.dir}/${ant.project.name}.jar" uniqueVersion="false">
      <remoteRepository url="${maven.install.repo}"/>
      <pom refid="pom"/>
      <attach file="${target.dir}/${ant.project.name}-sources.jar" classifier="sources"/>
    </artifact:deploy>
  </target>
</project>
